#include <algorithm>
#include <array>
#include <cstddef>
#include <cstdlib>
#include <utility>
#include <vector>

class UnionFind {
 public:
  UnionFind(int n) : components_(n), parent_(n), rank_(n, 0), size_(n, 1) {
    for (int i = 0; i < n; ++i) {
      parent_[i] = i;
    }
  }

  int find(int x) {
    if (parent_[x] != x) {
      parent_[x] = find(parent_[x]);
    }

    return parent_[x];
  }

  bool connected(int x, int y) { return find(x) == find(y); }

  void unite(int x, int y) {
    int rootX = find(x);
    int rootY = find(y);

    if (rootX == rootY) {
      return;
    }

    --components_;
    if (rank_[rootX] < rank_[rootY]) {
      parent_[rootX] = rootY;
      size_[rootY] += std::exchange(size_[rootX], 0);
      return;
    }

    if (rank_[rootX] == rank_[rootY]) {
      ++rank_[rootX];
    }
    parent_[rootY] = rootX;
    size_[rootX] += std::exchange(size_[rootY], 0);
  }

  int components() const noexcept { return components_; }

  int size(int x) { return size_[find(x)]; }

 private:
  int components_;

  std::vector<int> parent_;
  std::vector<int> rank_;
  std::vector<int> size_;
};

class Solution {
 public:
  int minMalwareSpread(std::vector<std::vector<int>>& graph,
                       std::vector<int>& initial) {
    // Similar to Minimize Malware Spread Two, except instead of removing the
    // infected node, and all its edges, simply mark it as not infected.
    // This node can still be infected if it is connected to an infected node.
    //
    // Thus, similarly, any component that is connected to more than 1 infected
    // node will all be infected.
    //
    // Not too sure what is different though.
    // Hm, create Graph G consisting of BOTH infected and uninfected.
    // Then, for each of the infected nodes, check the number of infected nodes
    // in their component, such that if > 1, then that component is hopeless.
    // Otherwise, take the size-1.
    constexpr int MAX_N = 300;
    const int n = graph.size();
    UnionFind G(n);

    // only upper triangular is necessary for bidirectional graph, as given
    // by graph[i][j] == graph[j][i].
    for (int u = 0; u < n; ++u) {
      for (int v = u + 1; v < n; ++v) {
        if (graph[u][v] == 1) {
          G.unite(u, v);
        }
      }
    }

    std::array<int, MAX_N + 1> numInfected{};
    for (int u : initial) {
      int root = G.find(u);
      ++numInfected[root];
    }

    int idx = *std::min_element(initial.begin(), initial.end());
    int best = -1;
    for (int u : initial) {
      int root = G.find(u);
      if (numInfected[root] > 1) {
        continue;
      }

      int potentialSaved = G.size(root);
      if (potentialSaved > best) {
        idx = u;
        best = potentialSaved;
      } else if (potentialSaved == best) {
        idx = std::min(idx, u);
      }
    }

    return idx;
  }
};
