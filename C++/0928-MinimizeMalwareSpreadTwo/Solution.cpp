#include <algorithm>
#include <bitset>
#include <cstddef>
#include <cstdlib>
#include <utility>
#include <vector>

class UnionFind {
 public:
  UnionFind(int n) : components_(n), parent_(n), rank_(n, 0), size_(n, 1) {
    for (int i = 0; i < n; ++i) {
      parent_[i] = i;
    }
  }

  int find(int x) {
    if (parent_[x] != x) {
      parent_[x] = find(parent_[x]);
    }

    return parent_[x];
  }

  bool connected(int x, int y) { return find(x) == find(y); }

  void unite(int x, int y) {
    int rootX = find(x);
    int rootY = find(y);

    if (rootX == rootY) {
      return;
    }

    --components_;
    if (rank_[rootX] < rank_[rootY]) {
      parent_[rootX] = rootY;
      size_[rootY] += std::exchange(size_[rootX], 0);
      return;
    }

    if (rank_[rootX] == rank_[rootY]) {
      ++rank_[rootX];
    }
    parent_[rootY] = rootX;
    size_[rootX] += std::exchange(size_[rootY], 0);
  }

  int components() const noexcept { return components_; }

  int size(int x) { return size_[find(x)]; }

 private:
  int components_;

  std::vector<int> parent_;
  std::vector<int> rank_;
  std::vector<int> size_;
};

class Solution {
 public:
  int minMalwareSpread(std::vector<std::vector<int>>& graph,
                       std::vector<int>& initial) {
    // Given a network of n nodes represented as an n*n adjacency matrix graph.
    // Some nodes initial infected by malware.
    // If nodes are in the same connected component as an infected node, both
    // nodes will be infected.
    // Minimize the infected nodes by removing exactly one node from initial,
    // i.e., remove one initial infected node. NOT remove any node.
    //
    // Note that the initial graph could be disconnected? Not sure.
    // At first glance, seems like finding articulation points, i.e., Tarjan's
    // Algorithm.
    // But the valid APs can only be part of the initially infected.
    // Also, we can only choose one AP.
    // And, that AP must disconnect the graph such that in the resulting
    // subgraph(s), there are no infected nodes.
    //
    // Union Find?
    // We can first ignore infected nodes. Union every other non-infected nodes.
    // Then, for each infected nodes, we can determine how many would-be
    // infected nodes will result from adding this node by checking its edges,
    // without actually union-ing.
    //
    // Does this account for indirect paths from an infected node through
    // another infected node, given that only 1 node can be removed?
    // Not too sure how to prove this.
    // Proof by AC i guess.
    //
    // Ah, need to handle the case where an "uninfected" node is connected to
    // > 1 infected node.
    // e.g., infected <--> uninfected <--> infected.
    // Both infected nodes will wrongly determine that the potential saved nodes
    // will be 1, when it is actually 0.
    //
    // Lots of edge cases. LOL.
    constexpr int MAX_N = 300;
    const int n = graph.size();

    std::bitset<MAX_N + 1> isInfected{};
    for (int x : initial) {
      isInfected.set(x);
    }

    // uninfected nodes only.
    UnionFind G(n);

    // only upper triangular is necessary for bidirectional graph, as given
    // by graph[i][j] == graph[j][i].
    std::vector<std::vector<int>> adj(n);
    for (int u = 0; u < n; ++u) {
      for (int v = u + 1; v < n; ++v) {
        if (graph[u][v] == 1) {
          adj[u].push_back(v);
          adj[v].push_back(u);

          if (!isInfected[u] && !isInfected[v]) {
            G.unite(u, v);
          }
        }
      }
    }

    std::array<int, MAX_N + 1> indegree{};
    for (int u : initial) {
      std::bitset<MAX_N + 1> seen;
      for (int v : adj[u]) {
        if (isInfected[v]) {
          continue;
        }
        int root = G.find(v);
        if (seen[root]) {
          continue;
        }
        ++indegree[root];
        seen.set(root);
      }
    }

    // seen components
    int idx = MAX_N + 1;
    int best = -1;
    for (int u : initial) {
      std::bitset<MAX_N + 1> seen;
      int potentialInfected = 0;
      for (int v : adj[u]) {
        if (isInfected[v]) {
          continue;
        }

        int root = G.find(v);
        if (seen[root] || indegree[root] > 1) {
          continue;
        }
        potentialInfected += G.size(root);
        seen.set(root);
      }

      if (potentialInfected > best) {
        idx = u;
        best = potentialInfected;
      } else if (potentialInfected == best) {
        idx = std::min(idx, u);
      }
    }

    return idx;
  }
};
